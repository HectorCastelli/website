---
import { SocialImage } from "astro-social-images";

import Announcement from "@components/Announcement.astro";
import { chunkString } from "@lib/strings";
import config from "@config";

interface Props {
  title?: string;
  author?: string;
  description?: string;
  keywords?: string[];
  frontmatter?: any;
}

// Use data from the frontmatter, then from the component, then from the config as fallback.
const data = {
  ...config,
  ...Astro.props,
  ...Astro.props.frontmatter,
};

const astroMode = import.meta.env.MODE;

const titleChunks = chunkString(data.title, 30);
const descriptionChunks = data.description
  ? chunkString(data.description, 80)
  : [];
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- SEO data -->
    <title>{data.title}</title>
    <meta name="author" content={data.author} />
    <meta name="description" content={data.description} />
    {
      data.keywords && (
        <meta name="keywords" content={data.keywords?.join(", ")} />
      )
    }
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon/favicon.png" />
    <!-- Analytics (only on production)-->
    {
      astroMode != "development" ? (
        <script
          async
          src="https://analytics.umami.is/script.js"
          data-website-id="f44226ef-3a9e-46ba-b98a-2dec9cb6129c"
        />
      ) : (
        ""
      )
    }
    <!-- Social media images -->
    <SocialImage
      backgroundColor="#10b981"
      images={[
        { url: "public/avatar-small.svg", attributes: { top: 375, left: 100 } },
      ]}
      texts={[
        ...(data.title != config.title
          ? [
              {
                content: config.title,
                attributes: {
                  x: "55",
                  y: "105",
                  "font-size": "48px",
                  fill: "#fafaf9",
                },
              },
            ]
          : []),
        ...titleChunks.map((chunk, index) => {
          return {
            content: chunk,
            attributes: {
              x: "55",
              y: (200 + index * 50).toString(),
              "font-size": "72px",
              fill: "#fafaf9",
            },
          };
        }),
        ...descriptionChunks.map((chunk, index) => {
          return {
            content: chunk,
            attributes: {
              x: "55",
              y: (200 + titleChunks.length * 50 + index * 30).toString(),
              "font-size": "24px",
              fill: "#fafaf9",
            },
          };
        }),
      ]}
    />
  </head>
  <body
    class="relative min-h-screen bg-gradient-to-br from-green-300 from-10% to-emerald-600 to-80% flex flex-col"
  >
    <Announcement />
    <slot />
  </body>
</html>
